// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/config/start": {
            "post": {
                "description": "Starts a Temporal workflow that fetches devices using an RQL query and sends a Ditto protocol message to each device.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Start a mass device configuration workflow",
                "parameters": [
                    {
                        "description": "Configuration request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.StartConfigRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Workflow started",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to start workflow",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/sites/create": {
            "post": {
                "description": "Accepts a JSON array of sites and starts a workflow for each",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "sites"
                ],
                "summary": "Start CreateSite workflows for a list of sites",
                "parameters": [
                    {
                        "description": "List of sites",
                        "name": "sites",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/workflow.CreateSiteParams"
                            }
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Workflows started",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to start workflow",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.StartConfigRequest": {
            "type": "object",
            "properties": {
                "ditto_protocol_message": {
                    "$ref": "#/definitions/models.DittoProtocolMessage"
                },
                "rql_query": {
                    "type": "string"
                }
            }
        },
        "models.DittoProtocolMessage": {
            "type": "object",
            "properties": {
                "headers": {
                    "type": "object",
                    "additionalProperties": true
                },
                "path": {
                    "type": "string"
                },
                "topic": {
                    "type": "string"
                },
                "value": {}
            }
        },
        "workflow.CreateSiteParams": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "siteName": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
